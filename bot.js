const { Telegraf, session } = require("telegraf");
const token =
  process.env.BOT_TOKEN;
const bot = new Telegraf(token);
const citiesArr = require("./cities.json"); // JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–º

const WIN_CHANCE_PERCENT = -3;

bot.use(session())
//–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.start(async (ctx) => {
  await init(ctx);
});
// –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
bot.on("text", async (ctx) => {
  if (!ctx.session) { // –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞—è - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é
    console.log(ctx.session, '–Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è');
    await init(ctx, ctx.update.message.text.trim());
    return
  }
  await bot_response(ctx)
});

bot.launch(); // –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
async function init (ctx, startCity = '') {
  ctx.session = {
      citiesSet: new Set(),
      expectedFirstChar: '',
      botLost: false,
      winChance: WIN_CHANCE_PERCENT,
      userName: ctx.update.message.from.first_name
  };
  //console.log('start', ctx.session, 'startCity>>', startCity);
  if (!startCity) { // –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∫–∞–∫ –ø–µ—Ä–≤—ã–º –≥–æ—Ä–æ–¥–æ–º
    await ctx.replyWithHTML(`–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é, <b>${ctx.session.userName}</b>! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üòâ`);
  } else {
    await ctx.replyWithHTML(`–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é, <b>${ctx.session.userName}</b>! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üòâ`);
    await bot_response(ctx)
  }
};

// –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
async function bot_response (ctx) {

  if (ctx.session.botLost) {
    await ctx.replyWithHTML(
      `–Ø –ø—Ä–æ–∏–≥—Ä–∞–ª! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/start</b>`
    );
    return;
  }
  const usrCity = ctx.update.message.text.trim(); // —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ (–≥–æ—Ä–æ–¥)
  const isCityExist = isCityInArray(citiesArr, usrCity); // –ø—Ä–æ–≤–µ—Ä–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤ JSON —Ñ–∞–π–ª–µ
  if (!isCityExist) {
    // –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º
    await ctx.replyWithHTML(`<b>${usrCity}</b> - –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ üòê`);
    return;
  }

  // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –±—É–∫–≤–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π –≥–æ—Ä–æ–¥–∞ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —é–∑–µ—Ä - –≤—ã—Ö–æ–¥–∏–º
  if (
    ctx.session.expectedFirstChar?.length > 0 &&
    usrCity[0].toLocaleUpperCase() !== ctx.session.expectedFirstChar
  ) {
    await wait(500);
    await ctx.replyWithHTML(
      `–¢–µ–±–µ –Ω–∞ <b>${ctx.session.expectedFirstChar}</b>`
    );
    return;
  }
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—ç—Ç —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  if (ctx.session.citiesSet.has(usrCity.toLocaleUpperCase())) {
    await ctx.replyWithHTML(`<b>${usrCity}</b> - —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª üòê`);
    return;
  }
  ctx.session.citiesSet.add(usrCity.toLocaleUpperCase()); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—ç—Ç –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞
  const cityLastChar = getCityLastChar(usrCity); // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞
  const citiesByChar = findCitiesByChar(citiesArr, cityLastChar); // –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ —á—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ —ç—Ç—É –±—É–∫–≤—É
  const notNamedCities = removeExceptions(
    citiesByChar,
    ctx.session.citiesSet
  ); // —É–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç –≥–æ—Ä–æ–¥–∞ —á—Ç–æ —É–∂–µ –±—ã–ª–∏
  console.log(
    "—à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å>>",
    ctx.session.winChance + "%",
    "user>>",
    ctx.update.message.from.first_name
  );
  if (notNamedCities.length < 1 || tryWin(ctx.session.winChance)) {
    // –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –±—É–∫–≤—É –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    await ctx.replyWithHTML(`üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª, <b>${ctx.session.userName}</b>! üéâ –Ø –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–æ–≤ üòè`);
    botLost = true;
    console.log(
      "notNamedCities>>",
      notNamedCities.length,
      "cityLastChar>>",
      cityLastChar
    );
    return;
  }
  ctx.session.winChance = ctx.session.winChance + 1; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å —É –±–æ—Ç–∞
  const randomCity = getRandom(notNamedCities); // —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
  await wait(100);
  ctx.reply(randomCity); // –æ—Ç–≤–µ—á–∞–µ–º
  ctx.session.citiesSet.add(randomCity.toLocaleUpperCase()); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—ç—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
  console.log("citiesSet>>", ctx.session.citiesSet, 'ctx.session>>', ctx.session);
  await wait();
  ctx.session.expectedFirstChar = getCityLastChar(randomCity); // –ø–∏—à–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç
  ctx.replyWithHTML(`–¢–µ–±–µ –Ω–∞ <b>${ctx.session.expectedFirstChar}</b>`);
}

/** –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ */
function isCityInArray(arr, cityName) {
  const result = arr.some((el) => el.toUpperCase() === cityName.toUpperCase());
  return result;
}

/** –Ω–∞–π—Ç–∏ –≤ –º–∞—Å—Å–∏–≤–µ –≤—Å–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞ - –∞—Ä–≥—É–º–µ–Ω—Ç–∞ */
function findCitiesByChar(arr, char) {
  const result = arr.filter((el) => el[0].toUpperCase() === char.toUpperCase());
  return result;
}

/** –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ */
function getRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/** –∂–¥–∞—Ç—å –∑–∞–¥–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º—Å */
function wait(ms = 1000) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(true);
    }, ms);
  });
}
/** –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞, —É—á–∏—Ç–≤–∞—è –±—É–∫–≤—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è */
function getCityLastChar(city) {
  const charExceptions = new Set(["–™", "–¨", /*'–ô',*/ "–´", ")"]);
  const arr = city.toUpperCase().split("");
  const newArr = arr.filter((el) => {
    return !charExceptions.has(el);
  });
  const lastChar = newArr[newArr.length - 1];
  return lastChar;
}
/** —É–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ */
function removeExceptions(arr, exSet) {
  return arr.filter((el) => !exSet.has(el));
}

/** –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å */
function tryWin(_winChance) {
  let result = false;
  const randomNumber = Math.random() * 100;
  if (_winChance > 0 && randomNumber <= _winChance) {
    result = true;
    console.log("–í—ã–∏–≥—Ä—ã—à –ø–æ —Å–ª—É—á–∞—é", randomNumber, _winChance + "%");
  }
  return result;
}
